using UnityEngine;
using System.Collections;

public class PlayerControl : MonoBehaviour
{


	[HideInInspector]
	public bool facingRight = true;			// For determining which way the player is currently facing.

	public float moveForce = 365f;			// Amount of force added to move the player left and right.
	public float maxSpeed = 5f;				// The fastest the player can travel in the x axis.
	public float jumpForce = 100f;			// Amount of force added when the player jumps.
	public char cEmote = 'z';				//Nuetral Starting Emote

	private bool grounded = false;			// Whether or not the player is grounded
    bool dead = false;
	bool bCrippled = false;
	int iHighJump = 1;
	float fSpdMult = 1f;

	bool bCapped = false;

    public AudioClip jumpClip;
    public AudioClip[] stepClip;

	public bool bNausia; //For Inverting movement.
	public float fNausiaCount;

    private Animator anim;

    public float selfRightingFactor;

    public bool IsDead()
    {
        return dead;
    }

    void Start()
    {
        anim = GameObject.Find("Animation").GetComponent<Animator>();
    }


	void Update()
	{
        if (dead)
        {
            var emiter = GameObject.Find("PlayerDeathEmiter");
            emiter.transform.position = transform.position;
            emiter.GetComponent<ParticleSystem>().Emit(20);
            gameObject.active = false;
        }
	}

	void FixedUpdate ()
	{
		// Cache the horizontal input.
		float h = Input.GetAxis("Horizontal") * (bNausia ? -1 : 1);

        if (anim == null)
        {
            if (GameObject.Find("Animation") == null)
            {

                anim = GameObject.Find("Animation").GetComponent<Animator>();
                if (anim == null)
                    return;
            }
        }
		// The Speed animator parameter is set to the absolute value of the horizontal input.
		//anim.SetFloat("Speed", Mathf.Abs(h));
        anim.SetFloat("SpeedX", Mathf.Abs(rigidbody2D.velocity.x));

		// If the player is changing direction (h has a different sign to velocity.x) or hasn't reached maxSpeed yet...
		if(h * rigidbody2D.velocity.x <= maxSpeed && !bCrippled)
			// ... add a force to the player.
			rigidbody2D.AddForce(Vector2.right * h * moveForce * fSpdMult);
			
		 //If the player's horizontal velocity is greater than the maxSpeed...
		if(Mathf.Abs(rigidbody2D.velocity.x) > maxSpeed)
			// ... set the player's velocity to the maxSpeed in the x axis.
			rigidbody2D.velocity = new Vector2(Mathf.Sign(rigidbody2D.velocity.x) * maxSpeed * fSpdMult, rigidbody2D.velocity.y);
		

		// If the input is moving the player right and the player is facing left...
		if(h > 0 && !facingRight)
			// ... flip the player.
			Flip();
		// Otherwise if the input is moving the player left and the player is facing right...
		else if(h < 0 && facingRight)
			// ... flip the player.
			Flip();
	}

    public void Jump()
    {
        if (grounded)
        {
			Vector2 speed = rigidbody2D.velocity;

            if (!((speed.y > 0.01) || speed.y < -0.01))
            {
                // Jump
                AudioSource.PlayClipAtPoint(jumpClip, transform.position, 0.5f);  
                rigidbody2D.AddForce(new Vector2(0f, jumpForce * iHighJump));
                anim.SetBool("Grounded", false);
                anim.SetTrigger("Jump");
                grounded = false;
            }
        }
    }
	
	void Flip ()
	{
		// Switch the way the player is labelled as facing.
		facingRight = !facingRight;

		// Multiply the player's x local scale by -1.
		Vector3 theScale = transform.localScale;
		theScale.x *= -1;
		transform.localScale = theScale;
	}

    void OnCollisionEnter2D(Collision2D coll)
    {
        // Check for deadly collision
        if (coll.collider.tag == "Deadly")
        {
            dead = true;
            print("You are dead");
        }

        if (coll.collider.tag == "Crip")
		{
	   		bCrippled = true;
		}

		if(coll.collider.tag == "Tramp")
		{
			iHighJump = 2;
		}

		if(coll.collider.tag == "Decel")
		{
			fSpdMult = 0.5f;
		}

		if(coll.collider.tag == "Accel")
		{
			fSpdMult = 2f;
		}

        if ((coll.transform.position.y < this.transform.position.y))
        {
            if (coll.collider.gameObject.layer == LayerMask.NameToLayer("Ground"))

            {
                anim.SetBool("Grounded", true);
                grounded = true;
                print("Layer Ground");
            }
            else
                print("Layer Not ground");
        }
    }

    void OnCollisionExit2D(Collision2D coll)
    {
        if (coll.collider.tag == "Boundary")
        {
            print("Left the level");
        }

		if (coll.collider.tag == "Crip")
		{
			bCrippled = false;
		}

		if(coll.collider.tag == "Tramp")
		{
			iHighJump = 1;
		}

		if(coll.collider.tag == "Decel")
		{
			fSpdMult = 1;
		}

		if(coll.collider.tag == "Accel")
		{
			fSpdMult = 1;
		}
    }

    public void ActivateAbility(int i)
    {
		switch(i)
		{
		case 1:
			cEmote = 'A';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(0.9f, 0.1f, 0.1f));
			break;
		case 2:
			cEmote = 'S';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(0.1f, 0.1f, 0.9f));
			break;
		case 3:
			cEmote = 'H';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(0.9f, 0.9f, 0.1f));
			break;
		case 4:
			cEmote = 'D';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(0.1f, 0.9f, 0.1f));
			break;
		case 5:
			cEmote = 'U';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(1f, 0.6f, 0.1f));
			break;
		case 6:
			cEmote = 'F';
            GameObject.Find("Main Camera").GetComponent<CameraControler>().SetClearColor(new Color(0.5f, 0.1f, 0.9f));
			break;
		}
        print("Ability Activated " + i);
    }

    public void OnStep(int step)
    {
        AudioSource.PlayClipAtPoint(stepClip[step], transform.position, 0.35f);
    }
}